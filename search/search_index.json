{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"01_importance/","text":"What is Fullstack? \ud83d\udcbb \u00b6 TODO: Coming soon!","title":"Why Fullstack"},{"location":"01_importance/#what-is-fullstack","text":"TODO: Coming soon!","title":"What is Fullstack? \ud83d\udcbb"},{"location":"02_application/","text":"Fullstack COVID-19 Tracker \u00b6 TODO: Coming soon!","title":"Finished Product"},{"location":"02_application/#fullstack-covid-19-tracker","text":"TODO: Coming soon!","title":"Fullstack COVID-19 Tracker"},{"location":"03_examples/","text":"Exquisite Examples \ud83e\udd73 \u00b6 We've established the power of fullstack and TigerGraph. To further solidify these claims, we can take a look at the following applications put together using TigerGraph \ud83d\ude0a. New feature, coming soon! If you wish to feature your applications here, make sure to be on the lookout for a submission form under the Community tab. Currently in the works! COVID-19 Tracker \u00b6 TODO: Coming soon! TigerGraph C360 \u00b6 TODO: Coming soon! Want to learn how to create your own? Make sure to check out the Course Chapters tab. Happy developing! \ud83e\udd73\ud83e\udd73\ud83e\udd73","title":"Exquisite Examples"},{"location":"03_examples/#exquisite-examples","text":"We've established the power of fullstack and TigerGraph. To further solidify these claims, we can take a look at the following applications put together using TigerGraph \ud83d\ude0a. New feature, coming soon! If you wish to feature your applications here, make sure to be on the lookout for a submission form under the Community tab. Currently in the works!","title":"Exquisite Examples \ud83e\udd73"},{"location":"03_examples/#covid-19-tracker","text":"TODO: Coming soon!","title":"COVID-19 Tracker"},{"location":"03_examples/#tigergraph-c360","text":"TODO: Coming soon! Want to learn how to create your own? Make sure to check out the Course Chapters tab. Happy developing! \ud83e\udd73\ud83e\udd73\ud83e\udd73","title":"TigerGraph C360"},{"location":"04_resources/","text":"All the external resources from Course Chapters , all in one place. \ud83e\uddd0 Ch 01 - Introduction \ufe0f \u00b6 Ch 02 - Environment Setup \u00b6 Ch 03 - Frontend Design \u00b6 Ch 04 - Creating Queries \u00b6 Ch 05 - Middleware \u00b6 Ch 06 - Fetching Data \u00b6 Ch 07 - Deployment \u00b6 Misc - Additional Resources \u00b6","title":"Resources"},{"location":"04_resources/#ch-01-introduction","text":"","title":"Ch 01 - Introduction \ufe0f"},{"location":"04_resources/#ch-02-environment-setup","text":"","title":"Ch 02 - Environment Setup"},{"location":"04_resources/#ch-03-frontend-design","text":"","title":"Ch 03 - Frontend Design"},{"location":"04_resources/#ch-04-creating-queries","text":"","title":"Ch 04 - Creating Queries"},{"location":"04_resources/#ch-05-middleware","text":"","title":"Ch 05 - Middleware"},{"location":"04_resources/#ch-06-fetching-data","text":"","title":"Ch 06 - Fetching Data"},{"location":"04_resources/#ch-07-deployment","text":"","title":"Ch 07 - Deployment"},{"location":"04_resources/#misc-additional-resources","text":"","title":"Misc - Additional Resources"},{"location":"05_community/","text":"TigerGraph Community \u00b6 Community Fourm \u00b6 TG Discord Chat \u00b6 Use the #general channel for casual conversations around TigerGraph Use the #support channel for general questions or discussion about TigerGraph Use the #tools channel for questions about TigerGraph community tools Use the #app-showcase channel for showing the things you build Use the #articles-blogs-news channel for posting interesting things you find on the web There are many other channels available, check the channel list Quasar CLI Community \u00b6 TODO: Coming soon!","title":"Get Connected"},{"location":"05_community/#tigergraph-community","text":"","title":"TigerGraph Community"},{"location":"05_community/#community-fourm","text":"","title":" Community Fourm"},{"location":"05_community/#tg-discord-chat","text":"Use the #general channel for casual conversations around TigerGraph Use the #support channel for general questions or discussion about TigerGraph Use the #tools channel for questions about TigerGraph community tools Use the #app-showcase channel for showing the things you build Use the #articles-blogs-news channel for posting interesting things you find on the web There are many other channels available, check the channel list","title":"  TG Discord Chat"},{"location":"05_community/#quasar-cli-community","text":"TODO: Coming soon!","title":"Quasar CLI Community"},{"location":"course/01_notes/","text":"Chapter 01 - Introduction to Fullstack \u00b6 Welcome to TigerGraph\u2019s Fullstack tutorial! With each of these seven chapters, we\u2019ll walk through creating a COVID-19 tracker that utilizes TigerGraph\u2019s Coronavirus Starter Kit to visualize, interact with, and gain insights into South Korea\u2019s population movements and disease spread. By the end of this tutorial, you\u2019ll have the tools necessary to create and deploy your very own full-stack application using TigerGraph! Tracker Overview \u00b6 TODO: Insert introduction overview here! This COVID-19 tracker has several key benefits. Patient Table Patient Table \u00b6 This patient table allows for easy access to all patient data, stored in a tabular format. In total, this table will contain <> distinct patients. The columns list each patient\u2019s name and ID number. By scrolling through, one can click on any patient to learn more about their information, consisting of statistics, timelines, and a map. Quick Statistics Quick Statistics \u00b6 Upon selecting a patient, several figures will be displayed. These values include \u201cPeople Contacted\u201d, \u201cPeople Infected\u201d, \u201cTravel Events\u201d, and a custom \u201cRisk Score\u201d. This \u201cRisk Score\u201d is a measure of how likely it is that the given individual is infected. In order to calculate this value, . Travel Timeline Travel Timeline \u00b6 Furthermore, one valuable insight is the various locations an individual has visited. This timeline displays the dates, location names, and latitude/longitudes of each of the places the individual has travelled to. This timeline is displayed in chronological order and is compared with other individual\u2019s travel timelines to determine risk scores. Movement Map Movement Map \u00b6 In order to take this travel timeline one step further, each location is visualized on a map of South Korea. Each major point of interest is represented by a circle. The larger the circle, the more individuals that have travelled to that specific location. The darker the color, the riskier the location. This color value is determined by the number of individuals with COVID-19 that visited the location immediately before reporting a positive test. All combined, these features allow for quick analysis of this large dataset. In order to create our Covid-19 tracker, we will need to utilize a few powerful tools. Let\u2019s take a closer look at all of the required components and examine how these pieces will fit together\u2026 Talkin' TigerGraph \u00b6 We start with the most pertinent question: how will we store the data for this application? For this integral task, we turn to TigerGraph. Intro To TigerGraph \u00b6 TigerGraph is a native parallel graph database that can load and analyze large amounts of data in real-time. In comparison to traditional relational databases, TigerGraph's architecture and accompanying graph query language (GSQL) allow for quick, efficient, and powerful analytics. TigerGraph has transformed the following fields: Increase Revenue Product and Service Marketing Entity Resolution Customer Journey/360 Recommendation Engine Reduce Cost and Manage Risks Anti-Money Laundering (AML) Cybersecurity Threat Detection Fraud Protection Risk Assessment and Monitoring Improve Operational Efficiency Energy Management System Network Resources Optimization Supply Chain Analysis Foundational AI and Machine Learning Geospatial Analysis Time Series Analysis In order to learn more about the evolution and proven potential of graph databases, feel free to check out the following four-part video series created by TigerGraph. TODO: Format these videos properly (embed them) https://youtu.be/g_yhkMA3xoE https://youtu.be/qLTiyg7972o https://youtu.be/ZE2u9oLW18k https://youtu.be/mfP6oHNZv34 How does TigerGraph achieve such an edge over traditional relational databases? To answer this, we must take a deeper dive into the methodology of data storage in a native parallel graph. Native Parallel Graphs \u00b6 TODO: Coming soon!","title":"Chapter 01 - Introduction"},{"location":"course/01_notes/#chapter-01-introduction-to-fullstack","text":"Welcome to TigerGraph\u2019s Fullstack tutorial! With each of these seven chapters, we\u2019ll walk through creating a COVID-19 tracker that utilizes TigerGraph\u2019s Coronavirus Starter Kit to visualize, interact with, and gain insights into South Korea\u2019s population movements and disease spread. By the end of this tutorial, you\u2019ll have the tools necessary to create and deploy your very own full-stack application using TigerGraph!","title":"Chapter 01 - Introduction to Fullstack"},{"location":"course/01_notes/#tracker-overview","text":"TODO: Insert introduction overview here! This COVID-19 tracker has several key benefits. Patient Table","title":"Tracker Overview"},{"location":"course/01_notes/#patient-table","text":"This patient table allows for easy access to all patient data, stored in a tabular format. In total, this table will contain <> distinct patients. The columns list each patient\u2019s name and ID number. By scrolling through, one can click on any patient to learn more about their information, consisting of statistics, timelines, and a map. Quick Statistics","title":"Patient Table"},{"location":"course/01_notes/#quick-statistics","text":"Upon selecting a patient, several figures will be displayed. These values include \u201cPeople Contacted\u201d, \u201cPeople Infected\u201d, \u201cTravel Events\u201d, and a custom \u201cRisk Score\u201d. This \u201cRisk Score\u201d is a measure of how likely it is that the given individual is infected. In order to calculate this value, . Travel Timeline","title":"Quick Statistics"},{"location":"course/01_notes/#travel-timeline","text":"Furthermore, one valuable insight is the various locations an individual has visited. This timeline displays the dates, location names, and latitude/longitudes of each of the places the individual has travelled to. This timeline is displayed in chronological order and is compared with other individual\u2019s travel timelines to determine risk scores. Movement Map","title":"Travel Timeline"},{"location":"course/01_notes/#movement-map","text":"In order to take this travel timeline one step further, each location is visualized on a map of South Korea. Each major point of interest is represented by a circle. The larger the circle, the more individuals that have travelled to that specific location. The darker the color, the riskier the location. This color value is determined by the number of individuals with COVID-19 that visited the location immediately before reporting a positive test. All combined, these features allow for quick analysis of this large dataset. In order to create our Covid-19 tracker, we will need to utilize a few powerful tools. Let\u2019s take a closer look at all of the required components and examine how these pieces will fit together\u2026","title":"Movement Map"},{"location":"course/01_notes/#talkin-tigergraph","text":"We start with the most pertinent question: how will we store the data for this application? For this integral task, we turn to TigerGraph.","title":"Talkin' TigerGraph"},{"location":"course/01_notes/#intro-to-tigergraph","text":"TigerGraph is a native parallel graph database that can load and analyze large amounts of data in real-time. In comparison to traditional relational databases, TigerGraph's architecture and accompanying graph query language (GSQL) allow for quick, efficient, and powerful analytics. TigerGraph has transformed the following fields: Increase Revenue Product and Service Marketing Entity Resolution Customer Journey/360 Recommendation Engine Reduce Cost and Manage Risks Anti-Money Laundering (AML) Cybersecurity Threat Detection Fraud Protection Risk Assessment and Monitoring Improve Operational Efficiency Energy Management System Network Resources Optimization Supply Chain Analysis Foundational AI and Machine Learning Geospatial Analysis Time Series Analysis In order to learn more about the evolution and proven potential of graph databases, feel free to check out the following four-part video series created by TigerGraph. TODO: Format these videos properly (embed them) https://youtu.be/g_yhkMA3xoE https://youtu.be/qLTiyg7972o https://youtu.be/ZE2u9oLW18k https://youtu.be/mfP6oHNZv34 How does TigerGraph achieve such an edge over traditional relational databases? To answer this, we must take a deeper dive into the methodology of data storage in a native parallel graph.","title":"Intro To TigerGraph"},{"location":"course/01_notes/#native-parallel-graphs","text":"TODO: Coming soon!","title":"Native Parallel Graphs"},{"location":"course/02_notes/","text":"Chapter 02 - Environment Setup \u00b6 Introduction \u00b6 Now that we have covered the high-level design of the application, we are ready to set up our local development environment and start creating our TigerGraph Fullstack App. In this tutorial, we will use macOS. However, nearly every code section has Windows equivalents and Linux equivalents. For Windows reference, check out this page ! Trusted Tools \u00b6 Before beginning, it\u2019s important to choose reliable sources to learn from. Just like it's important to get your news from reputable sources, it's important to get your technical information from tried and trusted sources. Here are some of our personal favorites: The HTML/CSS/JS The HTML/CSS/JS \u00b6 For anything to do with HTML, CSS, or JavaScript, Mozilla's MDN is our go-to. We literally have it open all the time \ud83d\ude05.It's a good idea to head directly to MDN\u2019s GitHub page or their official documentation. It's best to head straight to the source. In this case, we will be using framework libraries like VueJS, Quasar, and Apache Echarts. The Browser The Browser \u00b6 Our recommendation is Chrome. The extension tools are amazing and the team behind them are amazing too. We will use the Vue.js devtools extension as well.It can be installed via the following hyperlink . The Editor The Editor \u00b6 Our recommendation is Visual Studio Code. It's free, open-source, and works well on Mac, Linux, and Windows. Perhaps one of the best features of VSCode is it has a huge amount of available plugins to choose from. Feel free to take a look! If you're not feeling VSCode, two other editors that are similar in their offering are Sublime Text 3 and Atom . Both are great tools! One of our developers used Sublime for a decade and still loves it. Another one of our developers enjoys Atom\u2019s TeleType feature, which allows for real time coding collaboration. Both are free to download. However, Sublime requires a one-time payment of $99 in order to gain certain licenses. If you want a more complete offering, you may investigate using an integrated development environment (commonly called an IDE.) The reigning, best IDE for front-end development is WebStorm . WebStorm is a very powerful IDE that has a lot of features and tools built into it. It aims to be more than just an editor; it aims to be the entire development suite. Great tool! The Terminal The Terminal \u00b6 You will have to use a terminal, but it\u2019s less scary than it seems, we promise! For the shell, we are going to use bash . You don't need to install it unless you're using Windows (then use these steps to enable it). It's 99% already there on your computer unless you're using some obscure flavor of Linux. Whenever you open your Mac terminal, it'll be running bash by default unless it has been changed. To remedy any command, check out this hyperlink! However, there are other options as well. The reason we use bash is that it is so prevalent. Bash is everywhere. Everything you Google will have the answers written in bash. One of our developer's favorite shells is actually fish but it's not very popular. Another shell people swear by is zsh . These are all very cool but we recommend looking at them later. Node.js Node.js \u00b6 Node.js is a runtime built on top of Chrome's V8. It allows you to develop apps in JavaScript outside of the browser. It's single-threaded non-blocking and asynchronous. This is achieved by the use of an event loop at the core of Node.js. If you know JS then you already know how to develop with Node.js! Let\u2019s take a closer look... For Windows If you're running Windows and not using Windows Subsystem Linux (WSL), I recommend you use the official installer from the Node.js site. Make sure to choose the latest LTS version. For Non-Windows If you're not on Windows or you are using WSL, we recommend installing Node.js with NVM (node version manager) . NVM allows you to install many versions of Node.js at once and switch whenever you may need to. Additionally, NVM installs Node.js in a folder that will not have permission errors that you would otherwise run into with the official installer. Once you have nvm installed, you need to install a Node version. You can download the latest LTS version with this command. nvm install --lts Quasar CLI Quasar CLI \u00b6 We selected Quasar as the frontend framework , and it is an open-source VueJS-based framework for building apps, with a single codebase to build SPAs, SSR App, PWA, BEX, Mobile, and Multi-platform Desktop Apps. Therefore, Quasar CLI comes in handy because it helps to create projects and build developing projects. Here\u2019s how to install it! Make sure that you have Node >=12.22.1 and NPM >=6.14.12 installed on your machine. WARNING: Do not use odd versions of Node (i.e. 13, 15, etc). These versions are not tested with Quasar and often cause issues due to their experimental nature. We highly recommend always using the LTS version of Node. # Node.js >=12.22.1 is required. $ yarn global add @quasar/cli # or $ npm install -g @quasar/cli Frontend \u00b6 With the tool installed, we are now ready to create a quasar project folder! First, it\u2019s good practice to create a bigger scope project folder named tigergraph_fullstack . $ mkdir tigergraph_fullstack $ cd tigergraph_full Next, we create a project folder with Quasar CLI: tigergraph_fullstack$ quasar create front ? Project name (internal usage for dev) front ? Project product name (must start with letter if building mobile apps) Quasar App ? Project description A Quasar Framework app ? Author ? Pick your CSS preprocessor: SCSS ? Check the features needed for your project: ESLint (recommended), Vuex, Axios ? Pick an ESLint preset: Standard ? Continue to install project dependencies after the project has been created? (recommended) NPM Now, we can open our tigergraph_fullstack project with vscode and open the terminal inside vscode as well. This can be done with a shortcut: ctrl + ` (for windows) or cmd + ` (for mac) Without further ado, let\u2019s start our quasar project! tigergraph_fullstack$ cd front tigergraph_fullstack$ quasar dev App \u2022 READY \u2022 Compiled: \"UI\" \u00bb App dir........... /Users/username/Desktop/tigergraph_fullstack/front \u00bb App URL........... http://localhost:8080 http://192.168.50.45:8080 http://169.254.99.222:8080 http://192.168.2.1:8080 \u00bb Dev mode.......... spa \u00bb Pkg quasar........ v2.0.4 \u00bb Pkg @quasar/app... v3.1.0 \u00bb Transpiled JS..... yes (Babel) App \u2022 Opening default browser at http://localhost:8080 With the above lines, we have created our frontend project folder named front, and we have also run the project by using the command \u201cquasar dev\u201d inside the project folder (front). Now, we can use a browser to open the project with URL: http://localhost:8080 Awesome! Next, we will use some libraries to add to our fullstack app, so let\u2019s install them inside the quasar project folder (front). To do this, we can run the following. tigergraph_fullstack/front$ npm i echarts Neat! Next up, let\u2019s examine the middleware, an essential part of our project. Middleware \u00b6 pyTigerGraph \u00b6 FastAPI \u00b6","title":"Chapter 02 - Environment Setup"},{"location":"course/02_notes/#chapter-02-environment-setup","text":"","title":"Chapter 02 - Environment Setup"},{"location":"course/02_notes/#introduction","text":"Now that we have covered the high-level design of the application, we are ready to set up our local development environment and start creating our TigerGraph Fullstack App. In this tutorial, we will use macOS. However, nearly every code section has Windows equivalents and Linux equivalents. For Windows reference, check out this page !","title":"Introduction"},{"location":"course/02_notes/#trusted-tools","text":"Before beginning, it\u2019s important to choose reliable sources to learn from. Just like it's important to get your news from reputable sources, it's important to get your technical information from tried and trusted sources. Here are some of our personal favorites: The HTML/CSS/JS","title":"Trusted Tools"},{"location":"course/02_notes/#the-htmlcssjs","text":"For anything to do with HTML, CSS, or JavaScript, Mozilla's MDN is our go-to. We literally have it open all the time \ud83d\ude05.It's a good idea to head directly to MDN\u2019s GitHub page or their official documentation. It's best to head straight to the source. In this case, we will be using framework libraries like VueJS, Quasar, and Apache Echarts. The Browser","title":"The HTML/CSS/JS"},{"location":"course/02_notes/#the-browser","text":"Our recommendation is Chrome. The extension tools are amazing and the team behind them are amazing too. We will use the Vue.js devtools extension as well.It can be installed via the following hyperlink . The Editor","title":"The Browser"},{"location":"course/02_notes/#the-editor","text":"Our recommendation is Visual Studio Code. It's free, open-source, and works well on Mac, Linux, and Windows. Perhaps one of the best features of VSCode is it has a huge amount of available plugins to choose from. Feel free to take a look! If you're not feeling VSCode, two other editors that are similar in their offering are Sublime Text 3 and Atom . Both are great tools! One of our developers used Sublime for a decade and still loves it. Another one of our developers enjoys Atom\u2019s TeleType feature, which allows for real time coding collaboration. Both are free to download. However, Sublime requires a one-time payment of $99 in order to gain certain licenses. If you want a more complete offering, you may investigate using an integrated development environment (commonly called an IDE.) The reigning, best IDE for front-end development is WebStorm . WebStorm is a very powerful IDE that has a lot of features and tools built into it. It aims to be more than just an editor; it aims to be the entire development suite. Great tool! The Terminal","title":"The Editor"},{"location":"course/02_notes/#the-terminal","text":"You will have to use a terminal, but it\u2019s less scary than it seems, we promise! For the shell, we are going to use bash . You don't need to install it unless you're using Windows (then use these steps to enable it). It's 99% already there on your computer unless you're using some obscure flavor of Linux. Whenever you open your Mac terminal, it'll be running bash by default unless it has been changed. To remedy any command, check out this hyperlink! However, there are other options as well. The reason we use bash is that it is so prevalent. Bash is everywhere. Everything you Google will have the answers written in bash. One of our developer's favorite shells is actually fish but it's not very popular. Another shell people swear by is zsh . These are all very cool but we recommend looking at them later. Node.js","title":"The Terminal"},{"location":"course/02_notes/#nodejs","text":"Node.js is a runtime built on top of Chrome's V8. It allows you to develop apps in JavaScript outside of the browser. It's single-threaded non-blocking and asynchronous. This is achieved by the use of an event loop at the core of Node.js. If you know JS then you already know how to develop with Node.js! Let\u2019s take a closer look... For Windows If you're running Windows and not using Windows Subsystem Linux (WSL), I recommend you use the official installer from the Node.js site. Make sure to choose the latest LTS version. For Non-Windows If you're not on Windows or you are using WSL, we recommend installing Node.js with NVM (node version manager) . NVM allows you to install many versions of Node.js at once and switch whenever you may need to. Additionally, NVM installs Node.js in a folder that will not have permission errors that you would otherwise run into with the official installer. Once you have nvm installed, you need to install a Node version. You can download the latest LTS version with this command. nvm install --lts Quasar CLI","title":"Node.js"},{"location":"course/02_notes/#quasar-cli","text":"We selected Quasar as the frontend framework , and it is an open-source VueJS-based framework for building apps, with a single codebase to build SPAs, SSR App, PWA, BEX, Mobile, and Multi-platform Desktop Apps. Therefore, Quasar CLI comes in handy because it helps to create projects and build developing projects. Here\u2019s how to install it! Make sure that you have Node >=12.22.1 and NPM >=6.14.12 installed on your machine. WARNING: Do not use odd versions of Node (i.e. 13, 15, etc). These versions are not tested with Quasar and often cause issues due to their experimental nature. We highly recommend always using the LTS version of Node. # Node.js >=12.22.1 is required. $ yarn global add @quasar/cli # or $ npm install -g @quasar/cli","title":"Quasar CLI"},{"location":"course/02_notes/#frontend","text":"With the tool installed, we are now ready to create a quasar project folder! First, it\u2019s good practice to create a bigger scope project folder named tigergraph_fullstack . $ mkdir tigergraph_fullstack $ cd tigergraph_full Next, we create a project folder with Quasar CLI: tigergraph_fullstack$ quasar create front ? Project name (internal usage for dev) front ? Project product name (must start with letter if building mobile apps) Quasar App ? Project description A Quasar Framework app ? Author ? Pick your CSS preprocessor: SCSS ? Check the features needed for your project: ESLint (recommended), Vuex, Axios ? Pick an ESLint preset: Standard ? Continue to install project dependencies after the project has been created? (recommended) NPM Now, we can open our tigergraph_fullstack project with vscode and open the terminal inside vscode as well. This can be done with a shortcut: ctrl + ` (for windows) or cmd + ` (for mac) Without further ado, let\u2019s start our quasar project! tigergraph_fullstack$ cd front tigergraph_fullstack$ quasar dev App \u2022 READY \u2022 Compiled: \"UI\" \u00bb App dir........... /Users/username/Desktop/tigergraph_fullstack/front \u00bb App URL........... http://localhost:8080 http://192.168.50.45:8080 http://169.254.99.222:8080 http://192.168.2.1:8080 \u00bb Dev mode.......... spa \u00bb Pkg quasar........ v2.0.4 \u00bb Pkg @quasar/app... v3.1.0 \u00bb Transpiled JS..... yes (Babel) App \u2022 Opening default browser at http://localhost:8080 With the above lines, we have created our frontend project folder named front, and we have also run the project by using the command \u201cquasar dev\u201d inside the project folder (front). Now, we can use a browser to open the project with URL: http://localhost:8080 Awesome! Next, we will use some libraries to add to our fullstack app, so let\u2019s install them inside the quasar project folder (front). To do this, we can run the following. tigergraph_fullstack/front$ npm i echarts Neat! Next up, let\u2019s examine the middleware, an essential part of our project.","title":"Frontend"},{"location":"course/02_notes/#middleware","text":"","title":"Middleware"},{"location":"course/02_notes/#pytigergraph","text":"","title":"pyTigerGraph"},{"location":"course/02_notes/#fastapi","text":"","title":"FastAPI"},{"location":"course/03_notes/","text":"Installation, First Dash App \u00b6","title":"Chapter 03 - Frontend Design"},{"location":"course/03_notes/#installation-first-dash-app","text":"","title":"Installation, First Dash App"},{"location":"course/04_notes/","text":"Installation, First Dash App \u00b6","title":"Chapter 04 - Creating Queries"},{"location":"course/04_notes/#installation-first-dash-app","text":"","title":"Installation, First Dash App"},{"location":"course/05_notes/","text":"Installation, First Dash App \u00b6","title":"Chapter 05 - Middleware"},{"location":"course/05_notes/#installation-first-dash-app","text":"","title":"Installation, First Dash App"},{"location":"course/06_notes/","text":"Installation, First Dash App \u00b6","title":"Chapter 06 - Fetching Data"},{"location":"course/06_notes/#installation-first-dash-app","text":"","title":"Installation, First Dash App"},{"location":"course/07_notes/","text":"Installation, First Dash App \u00b6","title":"Chapter 07 - Deployment"},{"location":"course/07_notes/#installation-first-dash-app","text":"","title":"Installation, First Dash App"}]}